<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\RmBoardA.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\RmBoardA.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Apr 01 11:27:54 2024
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
HostPacketManager::Init() &rArr; bsp_host_com_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c5]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2b]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">ADC_IRQHandler</a><BR>
 <LI><a href="#[13]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">BusFault_Handler</a><BR>
 <LI><a href="#[11]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">HardFault_Handler</a><BR>
 <LI><a href="#[12]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">MemManage_Handler</a><BR>
 <LI><a href="#[14]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b]">ADC_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[13]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[2d]">CAN1_RX0_IRQHandler</a> from ispimp.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[2e]">CAN1_RX1_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[2f]">CAN1_SCE_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[2c]">CAN1_TX_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[59]">CAN2_RX0_IRQHandler</a> from ispimp.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[5a]">CAN2_RX1_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[5b]">CAN2_SCE_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[58]">CAN2_TX_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[68]">CRYP_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[67]">DCMI_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[24]">DMA1_Stream0_IRQHandler</a> from bsp_host_com.o(i.DMA1_Stream0_IRQHandler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[25]">DMA1_Stream1_IRQHandler</a> from bsp_judge.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[26]">DMA1_Stream2_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[27]">DMA1_Stream3_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[28]">DMA1_Stream4_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[29]">DMA1_Stream5_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream6_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[48]">DMA1_Stream7_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[71]">DMA2D_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[51]">DMA2_Stream0_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[52]">DMA2_Stream1_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[53]">DMA2_Stream2_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[54]">DMA2_Stream3_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[55]">DMA2_Stream4_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[5d]">DMA2_Stream5_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream6_IRQHandler</a> from bsp_imu.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream7_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[16]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[56]">ETH_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[57]">ETH_WKUP_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[1f]">EXTI0_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[41]">EXTI15_10_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[20]">EXTI1_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[21]">EXTI2_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[22]">EXTI3_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[23]">EXTI4_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[30]">EXTI9_5_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[1d]">FLASH_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[49]">FMC_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[6a]">FPU_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[69]">HASH_RNG_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[11]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[39]">I2C1_ER_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[38]">I2C1_EV_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[3b]">I2C2_ER_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[3a]">I2C2_EV_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[62]">I2C3_ER_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[61]">I2C3_EV_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[12]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[10]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[5c]">OTG_FS_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[43]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[64]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[63]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[66]">OTG_HS_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[65]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[1a]">PVD_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[17]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[1e]">RCC_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[42]">RTC_Alarm_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[1c]">RTC_WKUP_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[f]">Reset_Handler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[70]">SAI1_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[4a]">SDIO_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[3c]">SPI1_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[4c]">SPI3_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[6d]">SPI4_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[6e]">SPI5_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[6f]">SPI6_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[15]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[18]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[72]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f427x.o(.text)
 <LI><a href="#[1b]">TAMP_STAMP_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[31]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[34]">TIM1_CC_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[33]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[32]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[35]">TIM2_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[36]">TIM3_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[37]">TIM4_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[4b]">TIM5_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[4f]">TIM6_DAC_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[50]">TIM7_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[44]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[47]">TIM8_CC_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[46]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[45]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[4d]">UART4_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[4e]">UART5_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[6b]">UART7_IRQHandler</a> from ispimp.o(i.UART7_IRQHandler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[6c]">UART8_IRQHandler</a> from ispimp.o(i.UART8_IRQHandler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[3e]">USART1_IRQHandler</a> from bsp_rc.o(i.USART1_IRQHandler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[3f]">USART2_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[40]">USART3_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[60]">USART6_IRQHandler</a> from ispimp.o(i.USART6_IRQHandler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[14]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[19]">WWDG_IRQHandler</a> from startup_stm32f427x.o(.text) referenced from startup_stm32f427x.o(RESET)
 <LI><a href="#[78]">ChassisFsm::Init()</a> from chassiscontroller.o(i._ZN10ChassisFsm4InitEv) referenced from chassiscontroller.o(.constdata__ZTV10ChassisFsm)
 <LI><a href="#[8a]">HostPacket::Registration()</a> from hostpacket.o(i._ZN10HostPacket12RegistrationEv) referenced from hostpacket.o(.constdata__ZTV14TestHostPacket)
 <LI><a href="#[7a]">BoardPacket::Registration()</a> from boardpacket.o(i._ZN11BoardPacket12RegistrationEv) referenced from boardpacket.o(.constdata__ZTV11BoardPacket)
 <LI><a href="#[7a]">BoardPacket::Registration()</a> from boardpacket.o(i._ZN11BoardPacket12RegistrationEv) referenced from boardpacket.o(.constdata__ZTV15TestBoardPacket)
 <LI><a href="#[7a]">BoardPacket::Registration()</a> from boardpacket.o(i._ZN11BoardPacket12RegistrationEv) referenced from boardpacket.o(.constdata__ZTV16RobotStatePacket)
 <LI><a href="#[7b]">BoardPacket::Init(BoardPacketChannelIdType, unsigned char)</a> from boardpacket.o(i._ZN11BoardPacket4InitE24BoardPacketChannelIdTypeh) referenced from boardpacket.o(.constdata__ZTV11BoardPacket)
 <LI><a href="#[75]">CanMsgQueue::CanMsgQueue()</a> from canmsgdispatcher.o(i._ZN11CanMsgQueueC1Ev) referenced from main.o(i._ZN10CanManager8InstanceEv)
 <LI><a href="#[75]">CanMsgQueue::CanMsgQueue()</a> from canmsgdispatcher.o(i._ZN11CanMsgQueueC1Ev) referenced from chassisctrlmsg.o(i._ZN14ChassisCtrlMsg7SendMsgEv)
 <LI><a href="#[75]">CanMsgQueue::CanMsgQueue()</a> from canmsgdispatcher.o(i._ZN11CanMsgQueueC1Ev) referenced from canmsgdispatcher.o(i._ZN16CanMsgDispatcher6UpdateEv)
 <LI><a href="#[75]">CanMsgQueue::CanMsgQueue()</a> from canmsgdispatcher.o(i._ZN11CanMsgQueueC1Ev) referenced from boardpacket.o(i._ZN18BoardPacketManager18FlushSendBufferLowEv)
 <LI><a href="#[7c]">GimbalRefMsg::HandleNewCanRxMsg(CanRxMsg*)</a> from gimbalrefmsg.o(i._ZN12GimbalRefMsg17HandleNewCanRxMsgEP8CanRxMsg) referenced from gimbalrefmsg.o(.constdata__ZTV12GimbalRefMsg)
 <LI><a href="#[7f]">SensorEntity::HasNewData()</a> from entity.o(i._ZN12SensorEntity10HasNewDataEv) referenced from entity.o(.constdata__ZTV12SensorEntity)
 <LI><a href="#[7d]">SensorEntity::Init()</a> from entity.o(i._ZN12SensorEntity4InitEv) referenced from entity.o(.constdata__ZTV12SensorEntity)
 <LI><a href="#[80]">CanMsgHandler::HandleNewCanRxMsg(CanRxMsg*)</a> from m3508sensorhandler.o(i._ZN13CanMsgHandler17HandleNewCanRxMsgEP8CanRxMsg) referenced from boardpacket.o(.constdata__ZTV13CanMsgHandler)
 <LI><a href="#[82]">PacketManager::Init()</a> from packet.o(i._ZN13PacketManager4InitEv) referenced from packet.o(.constdata__ZTV13PacketManager)
 <LI><a href="#[81]">PacketManager::Update()</a> from packet.o(i._ZN13PacketManager6UpdateEv) referenced from packet.o(.constdata__ZTV13PacketManager)
 <LI><a href="#[81]">PacketManager::Update()</a> from packet.o(i._ZN13PacketManager6UpdateEv) referenced from hostpacket.o(.constdata__ZTV17HostPacketManager)
 <LI><a href="#[77]">StreamChannel::StreamChannel()</a> from packet.o(i._ZN13StreamChannelC1Ev) referenced from boardpacket.o(i._ZN18BoardPacketManagerC1Ev)
 <LI><a href="#[83]">ActuatorEntity::Init()</a> from entity.o(i._ZN14ActuatorEntity4InitEv) referenced from entity.o(.constdata__ZTV14ActuatorEntity)
 <LI><a href="#[83]">ActuatorEntity::Init()</a> from entity.o(i._ZN14ActuatorEntity4InitEv) referenced from m3508.o(.constdata__ZTV5M3508)
 <LI><a href="#[84]">ChassisCtrlMsg::HandleNewCanRxMsg(CanRxMsg*)</a> from chassisctrlmsg.o(i._ZN14ChassisCtrlMsg17HandleNewCanRxMsgEP8CanRxMsg) referenced from chassisctrlmsg.o(.constdata__ZTV14ChassisCtrlMsg)
 <LI><a href="#[88]">ChassisStateRc::Exit(ChassisController*)</a> from chassisstaterc.o(i._ZN14ChassisStateRc4ExitEP17ChassisController) referenced from chassisstaterc.o(.constdata__ZTV14ChassisStateRc)
 <LI><a href="#[85]">ChassisStateRc::Init(ChassisController*)</a> from chassisstaterc.o(i._ZN14ChassisStateRc4InitEP17ChassisController) referenced from chassisstaterc.o(.constdata__ZTV14ChassisStateRc)
 <LI><a href="#[86]">ChassisStateRc::Enter(ChassisController*)</a> from chassisstaterc.o(i._ZN14ChassisStateRc5EnterEP17ChassisController) referenced from chassisstaterc.o(.constdata__ZTV14ChassisStateRc)
 <LI><a href="#[87]">ChassisStateRc::Execute(ChassisController*)</a> from chassisstaterc.o(i._ZN14ChassisStateRc7ExecuteEP17ChassisController) referenced from chassisstaterc.o(.constdata__ZTV14ChassisStateRc)
 <LI><a href="#[89]">TestHostPacket::OnPacketReceived()</a> from hostpacket.o(i._ZN14TestHostPacket16OnPacketReceivedEv) referenced from hostpacket.o(.constdata__ZTV14TestHostPacket)
 <LI><a href="#[8b]">TestHostPacket::Init(unsigned char)</a> from hostpacket.o(i._ZN14TestHostPacket4InitEh) referenced from hostpacket.o(.constdata__ZTV14TestHostPacket)
 <LI><a href="#[8c]">TestBoardPacket::OnPacketReceived()</a> from boardpacket.o(i._ZN15TestBoardPacket16OnPacketReceivedEv) referenced from boardpacket.o(.constdata__ZTV15TestBoardPacket)
 <LI><a href="#[8d]">TestBoardPacket::Init(BoardPacketChannelIdType, unsigned char)</a> from boardpacket.o(i._ZN15TestBoardPacket4InitE24BoardPacketChannelIdTypeh) referenced from boardpacket.o(.constdata__ZTV15TestBoardPacket)
 <LI><a href="#[8e]">CanMsgDispatcher::Update()</a> from canmsgdispatcher.o(i._ZN16CanMsgDispatcher6UpdateEv) referenced from canmsgdispatcher.o(.constdata__ZTV16CanMsgDispatcher)
 <LI><a href="#[8f]">ControllerEntity::Init()</a> from entity.o(i._ZN16ControllerEntity4InitEv) referenced from entity.o(.constdata__ZTV16ControllerEntity)
 <LI><a href="#[90]">RobotStatePacket::OnPacketReceived()</a> from boardpacket.o(i._ZN16RobotStatePacket16OnPacketReceivedEv) referenced from boardpacket.o(.constdata__ZTV16RobotStatePacket)
 <LI><a href="#[91]">RobotStatePacket::Init(BoardPacketChannelIdType, unsigned char)</a> from boardpacket.o(i._ZN16RobotStatePacket4InitE24BoardPacketChannelIdTypeh) referenced from boardpacket.o(.constdata__ZTV16RobotStatePacket)
 <LI><a href="#[92]">ChassisController::Init()</a> from chassiscontroller.o(i._ZN17ChassisController4InitEv) referenced from chassiscontroller.o(.constdata__ZTV17ChassisController)
 <LI><a href="#[93]">ChassisController::Update()</a> from chassiscontroller.o(i._ZN17ChassisController6UpdateEv) referenced from chassiscontroller.o(.constdata__ZTV17ChassisController)
 <LI><a href="#[97]">ChassisStateDummy::Exit(ChassisController*)</a> from chassisstatedummy.o(i._ZN17ChassisStateDummy4ExitEP17ChassisController) referenced from chassisstatedummy.o(.constdata__ZTV17ChassisStateDummy)
 <LI><a href="#[94]">ChassisStateDummy::Init(ChassisController*)</a> from chassisstatedummy.o(i._ZN17ChassisStateDummy4InitEP17ChassisController) referenced from chassisstatedummy.o(.constdata__ZTV17ChassisStateDummy)
 <LI><a href="#[95]">ChassisStateDummy::Enter(ChassisController*)</a> from chassisstatedummy.o(i._ZN17ChassisStateDummy5EnterEP17ChassisController) referenced from chassisstatedummy.o(.constdata__ZTV17ChassisStateDummy)
 <LI><a href="#[96]">ChassisStateDummy::Execute(ChassisController*)</a> from chassisstatedummy.o(i._ZN17ChassisStateDummy7ExecuteEP17ChassisController) referenced from chassisstatedummy.o(.constdata__ZTV17ChassisStateDummy)
 <LI><a href="#[98]">HostPacketManager::FlushSendBufferLow()</a> from hostpacket.o(i._ZN17HostPacketManager18FlushSendBufferLowEv) referenced from hostpacket.o(.constdata__ZTV17HostPacketManager)
 <LI><a href="#[99]">HostPacketManager::Init()</a> from hostpacket.o(i._ZN17HostPacketManager4InitEv) referenced from hostpacket.o(.constdata__ZTV17HostPacketManager)
 <LI><a href="#[9d]">BoardPacketManager::HandleNewCanRxMsg(CanRxMsg*)</a> from boardpacket.o(i._ZN18BoardPacketManager17HandleNewCanRxMsgEP8CanRxMsg) referenced from boardpacket.o(.constdata__ZTV18BoardPacketManager)
 <LI><a href="#[9a]">BoardPacketManager::FlushSendBufferLow()</a> from boardpacket.o(i._ZN18BoardPacketManager18FlushSendBufferLowEv) referenced from boardpacket.o(.constdata__ZTV18BoardPacketManager)
 <LI><a href="#[9c]">BoardPacketManager::Init()</a> from boardpacket.o(i._ZN18BoardPacketManager4InitEv) referenced from boardpacket.o(.constdata__ZTV18BoardPacketManager)
 <LI><a href="#[9b]">BoardPacketManager::Update()</a> from boardpacket.o(i._ZN18BoardPacketManager6UpdateEv) referenced from boardpacket.o(.constdata__ZTV18BoardPacketManager)
 <LI><a href="#[a1]">M3508SensorHandler::HasNewData()</a> from m3508sensorhandler.o(i._ZN18M3508SensorHandler10HasNewDataEv) referenced from m3508sensorhandler.o(.constdata__ZTV18M3508SensorHandler)
 <LI><a href="#[a2]">M3508SensorHandler::HandleNewCanRxMsg(CanRxMsg*)</a> from m3508sensorhandler.o(i._ZN18M3508SensorHandler17HandleNewCanRxMsgEP8CanRxMsg) referenced from m3508sensorhandler.o(.constdata__ZTV18M3508SensorHandler)
 <LI><a href="#[9f]">M3508SensorHandler::Init()</a> from m3508sensorhandler.o(i._ZN18M3508SensorHandler4InitEv) referenced from m3508sensorhandler.o(.constdata__ZTV18M3508SensorHandler)
 <LI><a href="#[a0]">M3508SensorHandler::Update()</a> from m3508sensorhandler.o(i._ZN18M3508SensorHandler6UpdateEv) referenced from m3508sensorhandler.o(.constdata__ZTV18M3508SensorHandler)
 <LI><a href="#[a4]">DjiCanMotorCommander::Update()</a> from djicanmotorcommander.o(i._ZN20DjiCanMotorCommander6UpdateEv) referenced from djicanmotorcommander.o(.constdata__ZTV20DjiCanMotorCommander)
 <LI><a href="#[a5]">Dr16::Update()</a> from dr16.o(i._ZN4Dr166UpdateEv) referenced from dr16.o(.constdata__ZTV4Dr16)
 <LI><a href="#[a6]">Grasp::Update()</a> from grasp.o(i._ZN5Grasp6UpdateEv) referenced from grasp.o(.constdata__ZTV5Grasp)
 <LI><a href="#[a7]">M3508::Update()</a> from m3508.o(i._ZN5M35086UpdateEv) referenced from m3508.o(.constdata__ZTV5M3508)
 <LI><a href="#[76]">M3508::M3508()</a> from m3508.o(i._ZN5M3508C1Ev) referenced from chassiscontroller.o(i._ZN17ChassisControllerC1Ev)
 <LI><a href="#[a8]">Entity::Init()</a> from entity.o(i._ZN6Entity4InitEv) referenced from entity.o(.constdata__ZTV6Entity)
 <LI><a href="#[7e]">Entity::Update()</a> from entity.o(i._ZN6Entity6UpdateEv) referenced from entity.o(.constdata__ZTV12SensorEntity)
 <LI><a href="#[7e]">Entity::Update()</a> from entity.o(i._ZN6Entity6UpdateEv) referenced from entity.o(.constdata__ZTV14ActuatorEntity)
 <LI><a href="#[7e]">Entity::Update()</a> from entity.o(i._ZN6Entity6UpdateEv) referenced from entity.o(.constdata__ZTV16ControllerEntity)
 <LI><a href="#[7e]">Entity::Update()</a> from entity.o(i._ZN6Entity6UpdateEv) referenced from entity.o(.constdata__ZTV6Entity)
 <LI><a href="#[74]">HashTable&lang;CanMsgHandler*&rang;::HashTable()</a> from chassiscontroller.o(t._ZN9HashTableIP13CanMsgHandlerEC1Ev) referenced from main.o(i.SysTick_Handler)
 <LI><a href="#[74]">HashTable&lang;CanMsgHandler*&rang;::HashTable()</a> from chassiscontroller.o(t._ZN9HashTableIP13CanMsgHandlerEC1Ev) referenced from gimbalrefmsg.o(i._ZN12GimbalRefMsg4InitEP11CAN_TypeDefj)
 <LI><a href="#[74]">HashTable&lang;CanMsgHandler*&rang;::HashTable()</a> from chassiscontroller.o(t._ZN9HashTableIP13CanMsgHandlerEC1Ev) referenced from chassisctrlmsg.o(i._ZN14ChassisCtrlMsg4InitEP11CAN_TypeDefj)
 <LI><a href="#[74]">HashTable&lang;CanMsgHandler*&rang;::HashTable()</a> from chassiscontroller.o(t._ZN9HashTableIP13CanMsgHandlerEC1Ev) referenced from boardpacket.o(i._ZN16CanMsgDispatcher8InstanceEv)
 <LI><a href="#[74]">HashTable&lang;CanMsgHandler*&rang;::HashTable()</a> from chassiscontroller.o(t._ZN9HashTableIP13CanMsgHandlerEC1Ev) referenced from chassiscontroller.o(i._ZN17ChassisController4InitEv)
 <LI><a href="#[9e]">thunk{-1040} to BoardPacketManager::HandleNewCanRxMsg(CanRxMsg*)</a> from boardpacket.o(i._ZThn1040_N18BoardPacketManager17HandleNewCanRxMsgEP8CanRxMsg) referenced from boardpacket.o(.constdata__ZTV18BoardPacketManager)
 <LI><a href="#[a3]">thunk{-36} to M3508SensorHandler::HandleNewCanRxMsg(CanRxMsg*)</a> from m3508sensorhandler.o(i._ZThn36_N18M3508SensorHandler17HandleNewCanRxMsgEP8CanRxMsg) referenced from m3508sensorhandler.o(.constdata__ZTV18M3508SensorHandler)
 <LI><a href="#[79]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from boardpacket.o(.constdata__ZTV11BoardPacket)
 <LI><a href="#[79]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from packet.o(.constdata__ZTV13PacketManager)
 <LI><a href="#[79]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from packet.o(.constdata__ZTV6Packet)
 <LI><a href="#[aa]">__main</a> from __main.o(!!!main) referenced from startup_stm32f427x.o(.text)
 <LI><a href="#[a9]">__sti___8_main_cpp_testbot</a> from main.o(i.__sti___8_main_cpp_testbot) referenced from main.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[aa]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ac]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ae]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[16a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[16b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[af]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[16c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b6]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[b0]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[16d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[16e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[16f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[170]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[171]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[172]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[173]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[174]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[175]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[176]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[177]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[178]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[179]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[17b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[17c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[17d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[17e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[17f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[180]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[bb]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[181]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[182]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[183]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[184]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[185]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[186]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[187]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[ad]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[188]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b3]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b5]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[189]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b7]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Dr16::Init() &rArr; bsp_remote_control_init &rArr; bsp_rc_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[18a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[c6]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ba]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[18b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[bc]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f427x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet::MoveBuffer(const unsigned char*, unsigned char)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::SendOnePacket()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::CanTransmit(CAN_TypeDef*, unsigned, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[be]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[18c]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotEngine::RobotEngine(RobotEngine*, unsigned)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgHandler::HandleNewCanRxMsg(CanRxMsg*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet::Packet__sub_object()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StreamChannel::StreamChannel()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgQueue::Enqueue(CanRxMsg*)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalRefMsg::HandleNewCanRxMsg(CanRxMsg*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisCtrlMsg::HandleNewCanRxMsg(CanRxMsg*)
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[c0]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[c2]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[c1]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[bd]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[b4]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[b9]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c3]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[c7]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[191]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[192]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[195]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ispimp.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; CanManager::Instance() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgQueue::Enqueue(CanRxMsg*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::Instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ispimp.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; CanManager::Instance() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgQueue::Enqueue(CanRxMsg*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::Instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32f4xx_can.o(i.CAN_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>CAN_FilterInit</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, stm32f4xx_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can2_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
</UL>

<P><STRONG><a name="[c8]"></a>CAN_GetITStatus</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_GetITStatus))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[155]"></a>CAN_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can2_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
</UL>

<P><STRONG><a name="[153]"></a>CAN_Init</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can2_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
</UL>

<P><STRONG><a name="[ca]"></a>CAN_Receive</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>CAN_Transmit</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, stm32f4xx_can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DjiCanMotorCommander::Update()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::SendOnePacket()
</UL>

<P><STRONG><a name="[24]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_host_com.o(i.DMA1_Stream0_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_judge.o(i.DMA1_Stream1_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_imu.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>DMA_ClearFlag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_send
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>DMA_DeInit</STRONG> (Thumb, 272 bytes, Stack size 28 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_init
</UL>

<P><STRONG><a name="[166]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DoubleBufferModeCmd))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_init
</UL>

<P><STRONG><a name="[165]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DoubleBufferModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_init
</UL>

<P><STRONG><a name="[e1]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCurrentMemoryTarget))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_send_busy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_send
</UL>

<P><STRONG><a name="[15e]"></a>DMA_ITConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_init
</UL>

<P><STRONG><a name="[15d]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_init
</UL>

<P><STRONG><a name="[e2]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_send
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[16]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[14e]"></a>GPIO_Init</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_buzzer_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can2_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_gpio_init
</UL>

<P><STRONG><a name="[14d]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_buzzer_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can2_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
</UL>

<P><STRONG><a name="[158]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_on
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_gpio_low
</UL>

<P><STRONG><a name="[157]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_off
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_gpio_high
</UL>

<P><STRONG><a name="[11]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[156]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can2_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
</UL>

<P><STRONG><a name="[167]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[14c]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_buzzer_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can2_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_gpio_init
</UL>

<P><STRONG><a name="[14b]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_buzzer_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can2_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
</UL>

<P><STRONG><a name="[e6]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can2_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[163]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_init
</UL>

<P><STRONG><a name="[e5]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[e8]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[15]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[169]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18]"></a>SysTick_Handler</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, main.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SysTick_Handler &rArr; CanManager::Update() &rArr; CanManager::SendOnePacket() &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotEngine::Tick()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketManager::FlushSendBuffer()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::Update()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Instance()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::Instance()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::Instance()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::Instance()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacketManager::Instance()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(.text)
</UL>
<P><STRONG><a name="[151]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm_on
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm_off
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_buzzer_on
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_buzzer_off
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_buzzer_init
</UL>

<P><STRONG><a name="[150]"></a>TIM_OC1Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_buzzer_init
</UL>

<P><STRONG><a name="[161]"></a>TIM_OC4Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm_init
</UL>

<P><STRONG><a name="[14f]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_buzzer_init
</UL>

<P><STRONG><a name="[6b]"></a>UART7_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ispimp.o(i.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART7_IRQHandler &rArr; JudgeSystem::Instance()
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSystem::Instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>UART8_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ispimp.o(i.UART8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART8_IRQHandler &rArr; HostPacketManager::HostPacketManager() &rArr; Packet::Packet__sub_object() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketManager::Enqueue(unsigned, unsigned char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacketManager::HostPacketManager()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART1_IRQHandler</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, bsp_rc.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART1_IRQHandler &rArr; SBUS_TO_RC
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrentMemoryTarget
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_TO_RC
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>USART6_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ispimp.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[164]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_init
</UL>

<P><STRONG><a name="[15b]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_enable
</UL>

<P><STRONG><a name="[15a]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_send
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_init
</UL>

<P><STRONG><a name="[e4]"></a>USART_DeInit</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_init
</UL>

<P><STRONG><a name="[d9]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[159]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_init
</UL>

<P><STRONG><a name="[e7]"></a>USART_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_init
</UL>

<P><STRONG><a name="[db]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
</UL>

<P><STRONG><a name="[14]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427x.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>CanManager::CanTransmit(CAN_TypeDef*, unsigned, unsigned char*, unsigned)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, canmanager.o(i._ZN10CanManager11CanTransmitEP11CAN_TypeDefjPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanManager::CanTransmit(CAN_TypeDef*, unsigned, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisCtrlMsg::SendMsg()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::FlushSendBufferLow()
</UL>

<P><STRONG><a name="[eb]"></a>CanManager::SendOnePacket()</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, canmanager.o(i._ZN10CanManager13SendOnePacketEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CanManager::SendOnePacket() &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::Update()
</UL>

<P><STRONG><a name="[f0]"></a>CanManager::SendQueueEmpty()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, canmanager.o(i._ZN10CanManager14SendQueueEmptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::Update()
</UL>

<P><STRONG><a name="[ed]"></a>CanManager::Init()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, canmanager.o(i._ZN10CanManager4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CanManager::Init() &rArr; bsp_can2_init &rArr; CAN_FilterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can2_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>CanManager::Update()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, canmanager.o(i._ZN10CanManager6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CanManager::Update() &rArr; CanManager::SendOnePacket() &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::SendQueueEmpty()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::SendOnePacket()
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[cb]"></a>CanManager::Instance()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i._ZN10CanManager8InstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CanManager::Instance() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_testbot
</UL>

<P><STRONG><a name="[f1]"></a>ChassisFsm::HandleInput()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, chassiscontroller.o(i._ZN10ChassisFsm11HandleInputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ChassisFsm::HandleInput() &rArr; StateMachine&lang;ChassisController&rang;::ChangeState(State&lang;ChassisController&rang;*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::QuerySwState(Dr16::RcSwType, Dr16::RcSwStatusType)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateMachine&lang;ChassisController&rang;::ChangeState(State&lang;ChassisController&rang;*)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Instance()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateDummy::Instance()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRc::Instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::Update()
</UL>

<P><STRONG><a name="[78]"></a>ChassisFsm::Init()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, chassiscontroller.o(i._ZN10ChassisFsm4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ChassisFsm::Init() &rArr; ChassisStateDummy::Instance()
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateDummy::Instance()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRc::Instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassiscontroller.o(.constdata__ZTV10ChassisFsm)
</UL>
<P><STRONG><a name="[8a]"></a>HostPacket::Registration()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hostpacket.o(i._ZN10HostPacket12RegistrationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HostPacket::Registration() &rArr; HostPacketManager::Instance() &rArr; HostPacketManager::HostPacketManager() &rArr; Packet::Packet__sub_object() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketManager::PacketHandlerRegistration(unsigned, unsigned, Packet*)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacketManager::Instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hostpacket.o(.constdata__ZTV14TestHostPacket)
</UL>
<P><STRONG><a name="[112]"></a>HostPacket::Init(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hostpacket.o(i._ZN10HostPacket4InitEh))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestHostPacket::Init(unsigned char)
</UL>

<P><STRONG><a name="[7a]"></a>BoardPacket::Registration()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, boardpacket.o(i._ZN11BoardPacket12RegistrationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BoardPacket::Registration() &rArr; BoardPacketManager::Instance() &rArr; BoardPacketManager::BoardPacketManager() &rArr; BoardPacket::BoardPacket__sub_object() &rArr; Packet::Packet__sub_object() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketManager::PacketHandlerRegistration(unsigned, unsigned, Packet*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::Instance()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> boardpacket.o(.constdata__ZTV11BoardPacket)
<LI> boardpacket.o(.constdata__ZTV15TestBoardPacket)
<LI> boardpacket.o(.constdata__ZTV16RobotStatePacket)
</UL>
<P><STRONG><a name="[7b]"></a>BoardPacket::Init(BoardPacketChannelIdType, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, boardpacket.o(i._ZN11BoardPacket4InitE24BoardPacketChannelIdTypeh))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotStatePacket::Init(BoardPacketChannelIdType, unsigned char)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBoardPacket::Init(BoardPacketChannelIdType, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardpacket.o(.constdata__ZTV11BoardPacket)
</UL>
<P><STRONG><a name="[f7]"></a>BoardPacket::BoardPacket__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, boardpacket.o(i._ZN11BoardPacketC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BoardPacket::BoardPacket__sub_object() &rArr; Packet::Packet__sub_object() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet::Packet__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::BoardPacketManager()
</UL>

<P><STRONG><a name="[cc]"></a>CanMsgQueue::Enqueue(CanRxMsg*)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ispimp.o(i._ZN11CanMsgQueue7EnqueueEP8CanRxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanMsgQueue::Enqueue(CanRxMsg*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>CanMsgQueue::CanMsgQueue()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, canmsgdispatcher.o(i._ZN11CanMsgQueueC1Ev))
<BR>[Address Reference Count : 4]<UL><LI> boardpacket.o(i._ZN18BoardPacketManager18FlushSendBufferLowEv)
<LI> chassisctrlmsg.o(i._ZN14ChassisCtrlMsg7SendMsgEv)
<LI> canmsgdispatcher.o(i._ZN16CanMsgDispatcher6UpdateEv)
<LI> main.o(i._ZN10CanManager8InstanceEv)
</UL>
<P><STRONG><a name="[196]"></a>CanMsgQueue::CanMsgQueue__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, canmsgdispatcher.o(i._ZN11CanMsgQueueC1Ev), UNUSED)

<P><STRONG><a name="[da]"></a>JudgeSystem::Instance()</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, ispimp.o(i._ZN11JudgeSystem8InstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JudgeSystem::Instance()
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
</UL>

<P><STRONG><a name="[168]"></a>RobotEngine::Init()</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, robotengine.o(i._ZN11RobotEngine4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RobotEngine::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>RobotEngine::Tick()</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, robotengine.o(i._ZN11RobotEngine4TickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RobotEngine::Tick() &rArr; Entity::Update() &rArr; Time::GetTick()
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entity::Update()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entity::ClearUpdateFlag()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[fa]"></a>RobotEngine::GetTick()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, chassiscontroller.o(i._ZN11RobotEngine7GetTickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RobotEngine::GetTick()
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::Update()
</UL>

<P><STRONG><a name="[147]"></a>RobotEngine::AddEntity(Entity*, EntityType)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, robotengine.o(i._ZN11RobotEngine9AddEntityEP6Entity10EntityType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RobotEngine::AddEntity(Entity*, EntityType)
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entity::Entity(EntityType, EntityClassType, RobotEngine*)
</UL>

<P><STRONG><a name="[fb]"></a>RobotEngine::RobotEngine(RobotEngine*, unsigned)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, robotengine.o(i._ZN11RobotEngineC1EPS_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RobotEngine::RobotEngine(RobotEngine*, unsigned) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_testbot
</UL>

<P><STRONG><a name="[197]"></a>RobotEngine::RobotEngine__sub_object(RobotEngine*, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, robotengine.o(i._ZN11RobotEngineC1EPS_j), UNUSED)

<P><STRONG><a name="[fc]"></a>GimbalRefMsg::UncompressUint16(unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gimbalrefmsg.o(i._ZN12GimbalRefMsg16UncompressUint16Et))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalRefMsg::HandleNewCanRxMsg(CanRxMsg*)
</UL>

<P><STRONG><a name="[7c]"></a>GimbalRefMsg::HandleNewCanRxMsg(CanRxMsg*)</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gimbalrefmsg.o(i._ZN12GimbalRefMsg17HandleNewCanRxMsgEP8CanRxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GimbalRefMsg::HandleNewCanRxMsg(CanRxMsg*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalRefMsg::UncompressUint16(unsigned short)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbalrefmsg.o(.constdata__ZTV12GimbalRefMsg)
</UL>
<P><STRONG><a name="[fd]"></a>GimbalRefMsg::Init(CAN_TypeDef*, unsigned)</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gimbalrefmsg.o(i._ZN12GimbalRefMsg4InitEP11CAN_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GimbalRefMsg::Init(CAN_TypeDef*, unsigned) &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgDispatcher::RegisterHandler(CAN_TypeDef*, int, CanMsgHandler*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::Init()
</UL>

<P><STRONG><a name="[7f]"></a>SensorEntity::HasNewData()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, entity.o(i._ZN12SensorEntity10HasNewDataEv))
<BR>[Address Reference Count : 1]<UL><LI> entity.o(.constdata__ZTV12SensorEntity)
</UL>
<P><STRONG><a name="[7d]"></a>SensorEntity::Init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, entity.o(i._ZN12SensorEntity4InitEv))
<BR>[Address Reference Count : 1]<UL><LI> entity.o(.constdata__ZTV12SensorEntity)
</UL>
<P><STRONG><a name="[ff]"></a>SensorEntity::IsTimeout()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, entity.o(i._ZN12SensorEntity9IsTimeoutEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SensorEntity::IsTimeout() &rArr; Time::GetTick()
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::GetTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::Update()
</UL>

<P><STRONG><a name="[101]"></a>SensorEntity::SensorEntity(EntityClassType)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, entity.o(i._ZN12SensorEntityC1E15EntityClassType))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SensorEntity::SensorEntity(EntityClassType) &rArr; Entity::Entity(EntityType, EntityClassType, RobotEngine*) &rArr; RobotEngine::AddEntity(Entity*, EntityType)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entity::Entity(EntityType, EntityClassType, RobotEngine*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508SensorHandler::M3508SensorHandler()
</UL>

<P><STRONG><a name="[198]"></a>SensorEntity::SensorEntity__sub_object(EntityClassType)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, entity.o(i._ZN12SensorEntityC1E15EntityClassType), UNUSED)

<P><STRONG><a name="[80]"></a>CanMsgHandler::HandleNewCanRxMsg(CanRxMsg*)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m3508sensorhandler.o(i._ZN13CanMsgHandler17HandleNewCanRxMsgEP8CanRxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanMsgHandler::HandleNewCanRxMsg(CanRxMsg*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508SensorHandler::HandleNewCanRxMsg(CanRxMsg*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardpacket.o(.constdata__ZTV13CanMsgHandler)
</UL>
<P><STRONG><a name="[12c]"></a>CanMsgHandler::CanMsgHandler()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, boardpacket.o(i._ZN13CanMsgHandlerC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::BoardPacketManager()
</UL>

<P><STRONG><a name="[199]"></a>CanMsgHandler::CanMsgHandler__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boardpacket.o(i._ZN13CanMsgHandlerC1Ev), UNUSED)

<P><STRONG><a name="[d6]"></a>PacketManager::FlushSendBuffer()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, packet.o(i._ZN13PacketManager15FlushSendBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PacketManager::FlushSendBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_buzzer_on
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f6]"></a>PacketManager::PacketHandlerRegistration(unsigned, unsigned, Packet*)</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, packet.o(i._ZN13PacketManager25PacketHandlerRegistrationEjjP6Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PacketManager::PacketHandlerRegistration(unsigned, unsigned, Packet*) &rArr; StreamChannel::PacketHandlerRegistration(unsigned, Packet*)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StreamChannel::PacketHandlerRegistration(unsigned, Packet*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacket::Registration()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacket::Registration()
</UL>

<P><STRONG><a name="[82]"></a>PacketManager::Init()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, packet.o(i._ZN13PacketManager4InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::Init()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacketManager::Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> packet.o(.constdata__ZTV13PacketManager)
</UL>
<P><STRONG><a name="[81]"></a>PacketManager::Update()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, packet.o(i._ZN13PacketManager6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PacketManager::Update() &rArr; StreamChannel::Update() &rArr; Crc::VerifyCrc16CheckSum(unsigned char*, unsigned) &rArr; Crc::Get_CRC16_Check_Sum(unsigned char*, unsigned, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StreamChannel::Update()
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::Update()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hostpacket.o(.constdata__ZTV17HostPacketManager)
<LI> packet.o(.constdata__ZTV13PacketManager)
</UL>
<P><STRONG><a name="[dd]"></a>PacketManager::Enqueue(unsigned, unsigned char*, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, packet.o(i._ZN13PacketManager7EnqueueEjPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PacketManager::Enqueue(unsigned, unsigned char*, unsigned) &rArr; StreamChannel::Enqueue(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StreamChannel::Enqueue(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::HandleNewCanRxMsg(CanRxMsg*)
</UL>

<P><STRONG><a name="[127]"></a>PacketManager::PacketManager__sub_object(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, packet.o(i._ZN13PacketManagerC2Ej))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::BoardPacketManager()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacketManager::HostPacketManager()
</UL>

<P><STRONG><a name="[107]"></a>StreamChannel::HandlePacket()</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, packet.o(i._ZN13StreamChannel12HandlePacketEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StreamChannel::HandlePacket()
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet::MoveBuffer(const unsigned char*, unsigned char)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StreamChannel::Update()
</UL>

<P><STRONG><a name="[104]"></a>StreamChannel::PacketHandlerRegistration(unsigned, Packet*)</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, packet.o(i._ZN13StreamChannel25PacketHandlerRegistrationEjP6Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = StreamChannel::PacketHandlerRegistration(unsigned, Packet*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketManager::PacketHandlerRegistration(unsigned, unsigned, Packet*)
</UL>

<P><STRONG><a name="[105]"></a>StreamChannel::Update()</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, packet.o(i._ZN13StreamChannel6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = StreamChannel::Update() &rArr; Crc::VerifyCrc16CheckSum(unsigned char*, unsigned) &rArr; Crc::Get_CRC16_Check_Sum(unsigned char*, unsigned, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc::VerifyCrc16CheckSum(unsigned char*, unsigned)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc::VerifyCrc8CheckSum(unsigned char*, unsigned)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StreamChannel::HandlePacket()
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketManager::Update()
</UL>

<P><STRONG><a name="[106]"></a>StreamChannel::Enqueue(unsigned char*, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, packet.o(i._ZN13StreamChannel7EnqueueEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StreamChannel::Enqueue(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketManager::Enqueue(unsigned, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[77]"></a>StreamChannel::StreamChannel()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, packet.o(i._ZN13StreamChannelC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StreamChannel::StreamChannel() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacketManager::HostPacketManager()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardpacket.o(i._ZN18BoardPacketManagerC1Ev)
</UL>
<P><STRONG><a name="[19a]"></a>StreamChannel::StreamChannel__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, packet.o(i._ZN13StreamChannelC1Ev), UNUSED)

<P><STRONG><a name="[83]"></a>ActuatorEntity::Init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, entity.o(i._ZN14ActuatorEntity4InitEv))
<BR>[Address Reference Count : 2]<UL><LI> entity.o(.constdata__ZTV14ActuatorEntity)
<LI> m3508.o(.constdata__ZTV5M3508)
</UL>
<P><STRONG><a name="[10b]"></a>ActuatorEntity::ActuatorEntity(EntityClassType)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, entity.o(i._ZN14ActuatorEntityC1E15EntityClassType))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ActuatorEntity::ActuatorEntity(EntityClassType) &rArr; Entity::Entity(EntityType, EntityClassType, RobotEngine*) &rArr; RobotEngine::AddEntity(Entity*, EntityType)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entity::Entity(EntityType, EntityClassType, RobotEngine*)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508::M3508()
</UL>

<P><STRONG><a name="[19b]"></a>ActuatorEntity::ActuatorEntity__sub_object(EntityClassType)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, entity.o(i._ZN14ActuatorEntityC1E15EntityClassType), UNUSED)

<P><STRONG><a name="[110]"></a>ChassisCtrlMsg::CompressFloat(float)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, chassisctrlmsg.o(i._ZN14ChassisCtrlMsg13CompressFloatEf))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisCtrlMsg::SendMsg()
</UL>

<P><STRONG><a name="[10d]"></a>ChassisCtrlMsg::UncompressUint16(unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, chassisctrlmsg.o(i._ZN14ChassisCtrlMsg16UncompressUint16Et))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisCtrlMsg::HandleNewCanRxMsg(CanRxMsg*)
</UL>

<P><STRONG><a name="[84]"></a>ChassisCtrlMsg::HandleNewCanRxMsg(CanRxMsg*)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, chassisctrlmsg.o(i._ZN14ChassisCtrlMsg17HandleNewCanRxMsgEP8CanRxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ChassisCtrlMsg::HandleNewCanRxMsg(CanRxMsg*) &rArr; ArrayStreamHelper::ReadUint16(unsigned char*&, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayStreamHelper::ReadUint16(unsigned char*&, bool)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisCtrlMsg::UncompressUint16(unsigned short)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisctrlmsg.o(.constdata__ZTV14ChassisCtrlMsg)
</UL>
<P><STRONG><a name="[10e]"></a>ChassisCtrlMsg::Init(CAN_TypeDef*, unsigned)</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, chassisctrlmsg.o(i._ZN14ChassisCtrlMsg4InitEP11CAN_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ChassisCtrlMsg::Init(CAN_TypeDef*, unsigned) &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgDispatcher::RegisterHandler(CAN_TypeDef*, int, CanMsgHandler*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::Init()
</UL>

<P><STRONG><a name="[10f]"></a>ChassisCtrlMsg::SendMsg()</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, chassisctrlmsg.o(i._ZN14ChassisCtrlMsg7SendMsgEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ChassisCtrlMsg::SendMsg() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::CanTransmit(CAN_TypeDef*, unsigned, unsigned char*, unsigned)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisCtrlMsg::CompressFloat(float)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::Update()
</UL>

<P><STRONG><a name="[88]"></a>ChassisStateRc::Exit(ChassisController*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chassisstaterc.o(i._ZN14ChassisStateRc4ExitEP17ChassisController))
<BR>[Address Reference Count : 1]<UL><LI> chassisstaterc.o(.constdata__ZTV14ChassisStateRc)
</UL>
<P><STRONG><a name="[85]"></a>ChassisStateRc::Init(ChassisController*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chassisstaterc.o(i._ZN14ChassisStateRc4InitEP17ChassisController))
<BR>[Address Reference Count : 1]<UL><LI> chassisstaterc.o(.constdata__ZTV14ChassisStateRc)
</UL>
<P><STRONG><a name="[86]"></a>ChassisStateRc::Enter(ChassisController*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chassisstaterc.o(i._ZN14ChassisStateRc5EnterEP17ChassisController))
<BR>[Address Reference Count : 1]<UL><LI> chassisstaterc.o(.constdata__ZTV14ChassisStateRc)
</UL>
<P><STRONG><a name="[87]"></a>ChassisStateRc::Execute(ChassisController*)</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, chassisstaterc.o(i._ZN14ChassisStateRc7ExecuteEP17ChassisController))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ChassisStateRc::Execute(ChassisController*) &rArr; Dr16::Instance()
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::QuerySwState(Dr16::RcSwType, Dr16::RcSwStatusType)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstaterc.o(.constdata__ZTV14ChassisStateRc)
</UL>
<P><STRONG><a name="[f3]"></a>ChassisStateRc::Instance()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, chassiscontroller.o(i._ZN14ChassisStateRc8InstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ChassisStateRc::Instance()
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisFsm::Init()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisFsm::HandleInput()
</UL>

<P><STRONG><a name="[89]"></a>TestHostPacket::OnPacketReceived()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hostpacket.o(i._ZN14TestHostPacket16OnPacketReceivedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TestHostPacket::OnPacketReceived() &rArr; void TestHostPacket::SerializePacket&lang;InputMemoryStream&rang;(T1&) &rArr; InputMemoryStream::SerializeU32(unsigned&) &rArr; InputMemoryStream::SerializeBytes(unsigned char*, unsigned char) &rArr; InputMemoryStream::ReadBits(unsigned char*&, unsigned) &rArr; InputMemoryStream::ReadBits(unsigned char&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TestHostPacket::SerializePacket&lang;InputMemoryStream&rang;(T1&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hostpacket.o(.constdata__ZTV14TestHostPacket)
</UL>
<P><STRONG><a name="[8b]"></a>TestHostPacket::Init(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hostpacket.o(i._ZN14TestHostPacket4InitEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestHostPacket::Init(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacket::Init(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacketManager::Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hostpacket.o(.constdata__ZTV14TestHostPacket)
</UL>
<P><STRONG><a name="[8c]"></a>TestBoardPacket::OnPacketReceived()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, boardpacket.o(i._ZN15TestBoardPacket16OnPacketReceivedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TestBoardPacket::OnPacketReceived() &rArr; void Packet::SerializeHeader&lang;InputMemoryStream&rang;(T1&) &rArr; InputMemoryStream::SerializeU16(unsigned short&) &rArr; InputMemoryStream::SerializeBytes(unsigned char*, unsigned char) &rArr; InputMemoryStream::ReadBits(unsigned char*&, unsigned) &rArr; InputMemoryStream::ReadBits(unsigned char&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::SerializeU8(unsigned char&)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Packet::SerializeHeader&lang;InputMemoryStream&rang;(T1&)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Packet::SerializeCrc16&lang;InputMemoryStream&rang;(T1&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardpacket.o(.constdata__ZTV15TestBoardPacket)
</UL>
<P><STRONG><a name="[8d]"></a>TestBoardPacket::Init(BoardPacketChannelIdType, unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boardpacket.o(i._ZN15TestBoardPacket4InitE24BoardPacketChannelIdTypeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestBoardPacket::Init(BoardPacketChannelIdType, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacket::Init(BoardPacketChannelIdType, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardpacket.o(.constdata__ZTV15TestBoardPacket)
</UL>
<P><STRONG><a name="[fe]"></a>CanMsgDispatcher::RegisterHandler(CAN_TypeDef*, int, CanMsgHandler*)</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, canmsgdispatcher.o(i._ZN16CanMsgDispatcher15RegisterHandlerEP11CAN_TypeDefiP13CanMsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CanMsgDispatcher::RegisterHandler(CAN_TypeDef*, int, CanMsgHandler*)
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::Init()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisCtrlMsg::Init(CAN_TypeDef*, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalRefMsg::Init(CAN_TypeDef*, unsigned)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::Init()
</UL>

<P><STRONG><a name="[8e]"></a>CanMsgDispatcher::Update()</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, canmsgdispatcher.o(i._ZN16CanMsgDispatcher6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CanMsgDispatcher::Update() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canmsgdispatcher.o(.constdata__ZTV16CanMsgDispatcher)
</UL>
<P><STRONG><a name="[116]"></a>CanMsgDispatcher::Instance()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, boardpacket.o(i._ZN16CanMsgDispatcher8InstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CanMsgDispatcher::Instance() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::Init()
</UL>

<P><STRONG><a name="[8f]"></a>ControllerEntity::Init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, entity.o(i._ZN16ControllerEntity4InitEv))
<BR>[Address Reference Count : 1]<UL><LI> entity.o(.constdata__ZTV16ControllerEntity)
</UL>
<P><STRONG><a name="[117]"></a>ControllerEntity::ControllerEntity(EntityClassType)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, entity.o(i._ZN16ControllerEntityC1E15EntityClassType))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ControllerEntity::ControllerEntity(EntityClassType) &rArr; Entity::Entity(EntityType, EntityClassType, RobotEngine*) &rArr; RobotEngine::AddEntity(Entity*, EntityType)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entity::Entity(EntityType, EntityClassType, RobotEngine*)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::ChassisController()
</UL>

<P><STRONG><a name="[19c]"></a>ControllerEntity::ControllerEntity__sub_object(EntityClassType)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, entity.o(i._ZN16ControllerEntityC1E15EntityClassType), UNUSED)

<P><STRONG><a name="[118]"></a>FirstOrderFilter::Update()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, chassiscontroller.o(i._ZN16FirstOrderFilter6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FirstOrderFilter::Update() &rArr; RobotEngine::GetTick()
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotEngine::GetTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::FilterUpdate()
</UL>

<P><STRONG><a name="[90]"></a>RobotStatePacket::OnPacketReceived()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, boardpacket.o(i._ZN16RobotStatePacket16OnPacketReceivedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RobotStatePacket::OnPacketReceived() &rArr; void Packet::SerializeHeader&lang;InputMemoryStream&rang;(T1&) &rArr; InputMemoryStream::SerializeU16(unsigned short&) &rArr; InputMemoryStream::SerializeBytes(unsigned char*, unsigned char) &rArr; InputMemoryStream::ReadBits(unsigned char*&, unsigned) &rArr; InputMemoryStream::ReadBits(unsigned char&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::SerializeU16(unsigned short&)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::SerializeU8(unsigned char&)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Packet::SerializeHeader&lang;InputMemoryStream&rang;(T1&)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Packet::SerializeCrc16&lang;InputMemoryStream&rang;(T1&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardpacket.o(.constdata__ZTV16RobotStatePacket)
</UL>
<P><STRONG><a name="[91]"></a>RobotStatePacket::Init(BoardPacketChannelIdType, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, boardpacket.o(i._ZN16RobotStatePacket4InitE24BoardPacketChannelIdTypeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RobotStatePacket::Init(BoardPacketChannelIdType, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacket::Init(BoardPacketChannelIdType, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardpacket.o(.constdata__ZTV16RobotStatePacket)
</UL>
<P><STRONG><a name="[10c]"></a>ArrayStreamHelper::ReadUint16(unsigned char*&, bool)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, judgesystem.o(i._ZN17ArrayStreamHelper10ReadUint16ERPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArrayStreamHelper::ReadUint16(unsigned char*&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisCtrlMsg::HandleNewCanRxMsg(CanRxMsg*)
</UL>

<P><STRONG><a name="[11a]"></a>ChassisController::FilterUpdate()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, chassiscontroller.o(i._ZN17ChassisController12FilterUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ChassisController::FilterUpdate() &rArr; FirstOrderFilter::Update() &rArr; RobotEngine::GetTick()
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstOrderFilter::Update()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::Update()
</UL>

<P><STRONG><a name="[11e]"></a>ChassisController::MaxDeltaVLimit()</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, chassiscontroller.o(i._ZN17ChassisController14MaxDeltaVLimitEv))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::Update()
</UL>

<P><STRONG><a name="[11d]"></a>ChassisController::ChassisSpd2MotorSpd()</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, chassiscontroller.o(i._ZN17ChassisController19ChassisSpd2MotorSpdEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ChassisController::ChassisSpd2MotorSpd()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::Update()
</UL>

<P><STRONG><a name="[11f]"></a>ChassisController::MotorSpd2ChassisSpdFdb()</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, chassiscontroller.o(i._ZN17ChassisController22MotorSpd2ChassisSpdFdbEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ChassisController::MotorSpd2ChassisSpdFdb()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::Update()
</UL>

<P><STRONG><a name="[92]"></a>ChassisController::Init()</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, chassiscontroller.o(i._ZN17ChassisController4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ChassisController::Init() &rArr; Grasp::Init() &rArr; bsp_pwm_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::Init()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgDispatcher::RegisterHandler(CAN_TypeDef*, int, CanMsgHandler*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::Instance()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Instance()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::Instance()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisFsm::Init()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassiscontroller.o(.constdata__ZTV17ChassisController)
</UL>
<P><STRONG><a name="[93]"></a>ChassisController::Update()</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, chassiscontroller.o(i._ZN17ChassisController6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ChassisController::Update() &rArr; ChassisCtrlMsg::SendMsg() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_on
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_off
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorEntity::IsTimeout()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisCtrlMsg::SendMsg()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::Instance()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::MotorSpd2ChassisSpdFdb()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::ChassisSpd2MotorSpd()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::MaxDeltaVLimit()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::FilterUpdate()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisFsm::HandleInput()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassiscontroller.o(.constdata__ZTV17ChassisController)
</UL>
<P><STRONG><a name="[122]"></a>ChassisController::ChassisController()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, chassiscontroller.o(i._ZN17ChassisControllerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ChassisController::ChassisController() &rArr; ControllerEntity::ControllerEntity(EntityClassType) &rArr; Entity::Entity(EntityType, EntityClassType, RobotEngine*) &rArr; RobotEngine::AddEntity(Entity*, EntityType)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControllerEntity::ControllerEntity(EntityClassType)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_testbot
</UL>

<P><STRONG><a name="[19d]"></a>ChassisController::ChassisController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, chassiscontroller.o(i._ZN17ChassisControllerC1Ev), UNUSED)

<P><STRONG><a name="[97]"></a>ChassisStateDummy::Exit(ChassisController*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chassisstatedummy.o(i._ZN17ChassisStateDummy4ExitEP17ChassisController))
<BR>[Address Reference Count : 1]<UL><LI> chassisstatedummy.o(.constdata__ZTV17ChassisStateDummy)
</UL>
<P><STRONG><a name="[94]"></a>ChassisStateDummy::Init(ChassisController*)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, chassisstatedummy.o(i._ZN17ChassisStateDummy4InitEP17ChassisController))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ChassisStateDummy::Init(ChassisController*) &rArr; BoardPacketManager::BoardPacketManager() &rArr; BoardPacket::BoardPacket__sub_object() &rArr; Packet::Packet__sub_object() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::BoardPacketManager()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstatedummy.o(.constdata__ZTV17ChassisStateDummy)
</UL>
<P><STRONG><a name="[95]"></a>ChassisStateDummy::Enter(ChassisController*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chassisstatedummy.o(i._ZN17ChassisStateDummy5EnterEP17ChassisController))
<BR>[Address Reference Count : 1]<UL><LI> chassisstatedummy.o(.constdata__ZTV17ChassisStateDummy)
</UL>
<P><STRONG><a name="[96]"></a>ChassisStateDummy::Execute(ChassisController*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, chassisstatedummy.o(i._ZN17ChassisStateDummy7ExecuteEP17ChassisController))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ChassisStateDummy::Execute(ChassisController*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassisstatedummy.o(.constdata__ZTV17ChassisStateDummy)
</UL>
<P><STRONG><a name="[f4]"></a>ChassisStateDummy::Instance()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, chassiscontroller.o(i._ZN17ChassisStateDummy8InstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ChassisStateDummy::Instance()
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisFsm::Init()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisFsm::HandleInput()
</UL>

<P><STRONG><a name="[98]"></a>HostPacketManager::FlushSendBufferLow()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hostpacket.o(i._ZN17HostPacketManager18FlushSendBufferLowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HostPacketManager::FlushSendBufferLow() &rArr; bsp_host_com_send
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_send_busy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hostpacket.o(.constdata__ZTV17HostPacketManager)
</UL>
<P><STRONG><a name="[99]"></a>HostPacketManager::Init()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hostpacket.o(i._ZN17HostPacketManager4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HostPacketManager::Init() &rArr; bsp_host_com_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_host_com_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketManager::Init()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestHostPacket::Init(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hostpacket.o(.constdata__ZTV17HostPacketManager)
</UL>
<P><STRONG><a name="[d3]"></a>HostPacketManager::Instance()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hostpacket.o(i._ZN17HostPacketManager8InstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HostPacketManager::Instance() &rArr; HostPacketManager::HostPacketManager() &rArr; Packet::Packet__sub_object() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacketManager::HostPacketManager()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_testbot
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacket::Registration()
</UL>

<P><STRONG><a name="[dc]"></a>HostPacketManager::HostPacketManager()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hostpacket.o(i._ZN17HostPacketManagerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HostPacketManager::HostPacketManager() &rArr; Packet::Packet__sub_object() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet::Packet__sub_object()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StreamChannel::StreamChannel()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketManager::PacketManager__sub_object(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacketManager::Instance()
</UL>

<P><STRONG><a name="[19e]"></a>HostPacketManager::HostPacketManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, hostpacket.o(i._ZN17HostPacketManagerC1Ev), UNUSED)

<P><STRONG><a name="[114]"></a>InputMemoryStream::SerializeU8(unsigned char&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, memorystream.o(i._ZN17InputMemoryStream11SerializeU8ERh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InputMemoryStream::SerializeU8(unsigned char&) &rArr; InputMemoryStream::ReadBits(unsigned char&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::ReadBits(unsigned char&, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Packet::SerializeHeader&lang;InputMemoryStream&rang;(T1&)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotStatePacket::OnPacketReceived()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBoardPacket::OnPacketReceived()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TestHostPacket::SerializePacket&lang;InputMemoryStream&rang;(T1&)
</UL>

<P><STRONG><a name="[119]"></a>InputMemoryStream::SerializeU16(unsigned short&)</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, memorystream.o(i._ZN17InputMemoryStream12SerializeU16ERt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InputMemoryStream::SerializeU16(unsigned short&) &rArr; InputMemoryStream::SerializeBytes(unsigned char*, unsigned char) &rArr; InputMemoryStream::ReadBits(unsigned char*&, unsigned) &rArr; InputMemoryStream::ReadBits(unsigned char&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::SerializeBytes(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Packet::SerializeHeader&lang;InputMemoryStream&rang;(T1&)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotStatePacket::OnPacketReceived()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TestHostPacket::SerializePacket&lang;InputMemoryStream&rang;(T1&)
</UL>

<P><STRONG><a name="[12a]"></a>InputMemoryStream::SerializeU32(unsigned&)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, memorystream.o(i._ZN17InputMemoryStream12SerializeU32ERj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InputMemoryStream::SerializeU32(unsigned&) &rArr; InputMemoryStream::SerializeBytes(unsigned char*, unsigned char) &rArr; InputMemoryStream::ReadBits(unsigned char*&, unsigned) &rArr; InputMemoryStream::ReadBits(unsigned char&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::SerializeBytes(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TestHostPacket::SerializePacket&lang;InputMemoryStream&rang;(T1&)
</UL>

<P><STRONG><a name="[129]"></a>InputMemoryStream::SerializeBytes(unsigned char*, unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, memorystream.o(i._ZN17InputMemoryStream14SerializeBytesEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InputMemoryStream::SerializeBytes(unsigned char*, unsigned char) &rArr; InputMemoryStream::ReadBits(unsigned char*&, unsigned) &rArr; InputMemoryStream::ReadBits(unsigned char&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::ReadBits(unsigned char*&, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::SerializeU32(unsigned&)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::SerializeU16(unsigned short&)
</UL>

<P><STRONG><a name="[12b]"></a>InputMemoryStream::ReadBits(unsigned char*&, unsigned)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, memorystream.o(i._ZN17InputMemoryStream8ReadBitsERPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = InputMemoryStream::ReadBits(unsigned char*&, unsigned) &rArr; InputMemoryStream::ReadBits(unsigned char&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::ReadBits(unsigned char&, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::SerializeBytes(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[128]"></a>InputMemoryStream::ReadBits(unsigned char&, unsigned)</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, memorystream.o(i._ZN17InputMemoryStream8ReadBitsERhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InputMemoryStream::ReadBits(unsigned char&, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::ReadBits(unsigned char*&, unsigned)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::SerializeU8(unsigned char&)
</UL>

<P><STRONG><a name="[148]"></a>InputMemoryStream::InputMemoryStream(unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, memorystream.o(i._ZN17InputMemoryStreamC1EPh))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet::Packet__sub_object()
</UL>

<P><STRONG><a name="[19f]"></a>InputMemoryStream::InputMemoryStream__sub_object(unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memorystream.o(i._ZN17InputMemoryStreamC1EPh), UNUSED)

<P><STRONG><a name="[9d]"></a>BoardPacketManager::HandleNewCanRxMsg(CanRxMsg*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, boardpacket.o(i._ZN18BoardPacketManager17HandleNewCanRxMsgEP8CanRxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BoardPacketManager::HandleNewCanRxMsg(CanRxMsg*) &rArr; PacketManager::Enqueue(unsigned, unsigned char*, unsigned) &rArr; StreamChannel::Enqueue(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketManager::Enqueue(unsigned, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-1040} to BoardPacketManager::HandleNewCanRxMsg(CanRxMsg*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardpacket.o(.constdata__ZTV18BoardPacketManager)
</UL>
<P><STRONG><a name="[9a]"></a>BoardPacketManager::FlushSendBufferLow()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, boardpacket.o(i._ZN18BoardPacketManager18FlushSendBufferLowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BoardPacketManager::FlushSendBufferLow() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::CanTransmit(CAN_TypeDef*, unsigned, unsigned char*, unsigned)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardpacket.o(.constdata__ZTV18BoardPacketManager)
</UL>
<P><STRONG><a name="[9c]"></a>BoardPacketManager::Init()</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, boardpacket.o(i._ZN18BoardPacketManager4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BoardPacketManager::Init() &rArr; ChassisCtrlMsg::Init(CAN_TypeDef*, unsigned) &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketManager::Init()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgDispatcher::RegisterHandler(CAN_TypeDef*, int, CanMsgHandler*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisCtrlMsg::Init(CAN_TypeDef*, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalRefMsg::Init(CAN_TypeDef*, unsigned)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotStatePacket::Init(BoardPacketChannelIdType, unsigned char)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgDispatcher::Instance()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBoardPacket::Init(BoardPacketChannelIdType, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardpacket.o(.constdata__ZTV18BoardPacketManager)
</UL>
<P><STRONG><a name="[9b]"></a>BoardPacketManager::Update()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boardpacket.o(i._ZN18BoardPacketManager6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BoardPacketManager::Update() &rArr; PacketManager::Update() &rArr; StreamChannel::Update() &rArr; Crc::VerifyCrc16CheckSum(unsigned char*, unsigned) &rArr; Crc::Get_CRC16_Check_Sum(unsigned char*, unsigned, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketManager::Update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardpacket.o(.constdata__ZTV18BoardPacketManager)
</UL>
<P><STRONG><a name="[d5]"></a>BoardPacketManager::Instance()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, chassiscontroller.o(i._ZN18BoardPacketManager8InstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BoardPacketManager::Instance() &rArr; BoardPacketManager::BoardPacketManager() &rArr; BoardPacket::BoardPacket__sub_object() &rArr; Packet::Packet__sub_object() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::BoardPacketManager()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::Init()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_testbot
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacket::Registration()
</UL>

<P><STRONG><a name="[123]"></a>BoardPacketManager::BoardPacketManager()</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, boardpacket.o(i._ZN18BoardPacketManagerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BoardPacketManager::BoardPacketManager() &rArr; BoardPacket::BoardPacket__sub_object() &rArr; Packet::Packet__sub_object() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketManager::PacketManager__sub_object(unsigned)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgHandler::CanMsgHandler()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacket::BoardPacket__sub_object()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateDummy::Init(ChassisController*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::Instance()
</UL>

<P><STRONG><a name="[1a0]"></a>BoardPacketManager::BoardPacketManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, boardpacket.o(i._ZN18BoardPacketManagerC1Ev), UNUSED)

<P><STRONG><a name="[a1]"></a>M3508SensorHandler::HasNewData()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m3508sensorhandler.o(i._ZN18M3508SensorHandler10HasNewDataEv))
<BR>[Address Reference Count : 1]<UL><LI> m3508sensorhandler.o(.constdata__ZTV18M3508SensorHandler)
</UL>
<P><STRONG><a name="[a2]"></a>M3508SensorHandler::HandleNewCanRxMsg(CanRxMsg*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m3508sensorhandler.o(i._ZN18M3508SensorHandler17HandleNewCanRxMsgEP8CanRxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M3508SensorHandler::HandleNewCanRxMsg(CanRxMsg*) &rArr; CanMsgHandler::HandleNewCanRxMsg(CanRxMsg*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgHandler::HandleNewCanRxMsg(CanRxMsg*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-36} to M3508SensorHandler::HandleNewCanRxMsg(CanRxMsg*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3508sensorhandler.o(.constdata__ZTV18M3508SensorHandler)
</UL>
<P><STRONG><a name="[9f]"></a>M3508SensorHandler::Init()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m3508sensorhandler.o(i._ZN18M3508SensorHandler4InitEv))
<BR>[Address Reference Count : 1]<UL><LI> m3508sensorhandler.o(.constdata__ZTV18M3508SensorHandler)
</UL>
<P><STRONG><a name="[a0]"></a>M3508SensorHandler::Update()</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, m3508sensorhandler.o(i._ZN18M3508SensorHandler6UpdateEv))
<BR>[Address Reference Count : 1]<UL><LI> m3508sensorhandler.o(.constdata__ZTV18M3508SensorHandler)
</UL>
<P><STRONG><a name="[12d]"></a>M3508SensorHandler::M3508SensorHandler()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, m3508sensorhandler.o(i._ZN18M3508SensorHandlerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M3508SensorHandler::M3508SensorHandler() &rArr; SensorEntity::SensorEntity(EntityClassType) &rArr; Entity::Entity(EntityType, EntityClassType, RobotEngine*) &rArr; RobotEngine::AddEntity(Entity*, EntityType)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorEntity::SensorEntity(EntityClassType)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508::M3508()
</UL>

<P><STRONG><a name="[1a1]"></a>M3508SensorHandler::M3508SensorHandler__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, m3508sensorhandler.o(i._ZN18M3508SensorHandlerC1Ev), UNUSED)

<P><STRONG><a name="[149]"></a>OutputMemoryStream::OutputMemoryStream(unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, memorystream.o(i._ZN18OutputMemoryStreamC1EPh))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet::Packet__sub_object()
</UL>

<P><STRONG><a name="[1a2]"></a>OutputMemoryStream::OutputMemoryStream__sub_object(unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memorystream.o(i._ZN18OutputMemoryStreamC1EPh), UNUSED)

<P><STRONG><a name="[145]"></a>DjiCanMotorCommander::Add2Buffer(CAN_TypeDef*, int, short)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, djicanmotorcommander.o(i._ZN20DjiCanMotorCommander10Add2BufferEP11CAN_TypeDefis))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DjiCanMotorCommander::Add2Buffer(CAN_TypeDef*, int, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508::Update()
</UL>

<P><STRONG><a name="[a4]"></a>DjiCanMotorCommander::Update()</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, djicanmotorcommander.o(i._ZN20DjiCanMotorCommander6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DjiCanMotorCommander::Update() &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> djicanmotorcommander.o(.constdata__ZTV20DjiCanMotorCommander)
</UL>
<P><STRONG><a name="[12e]"></a>Crc::Get_CRC8_Check_Sum(unsigned char*, unsigned, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, crc.o(i._ZN3Crc18Get_CRC8_Check_SumEPhjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Crc::Get_CRC8_Check_Sum(unsigned char*, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc::VerifyCrc8CheckSum(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[10a]"></a>Crc::VerifyCrc8CheckSum(unsigned char*, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, crc.o(i._ZN3Crc18VerifyCrc8CheckSumEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Crc::VerifyCrc8CheckSum(unsigned char*, unsigned) &rArr; Crc::Get_CRC8_Check_Sum(unsigned char*, unsigned, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc::Get_CRC8_Check_Sum(unsigned char*, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StreamChannel::Update()
</UL>

<P><STRONG><a name="[12f]"></a>Crc::Get_CRC16_Check_Sum(unsigned char*, unsigned, unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, crc.o(i._ZN3Crc19Get_CRC16_Check_SumEPhjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Crc::Get_CRC16_Check_Sum(unsigned char*, unsigned, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc::VerifyCrc16CheckSum(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[109]"></a>Crc::VerifyCrc16CheckSum(unsigned char*, unsigned)</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, crc.o(i._ZN3Crc19VerifyCrc16CheckSumEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Crc::VerifyCrc16CheckSum(unsigned char*, unsigned) &rArr; Crc::Get_CRC16_Check_Sum(unsigned char*, unsigned, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc::Get_CRC16_Check_Sum(unsigned char*, unsigned, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StreamChannel::Update()
</UL>

<P><STRONG><a name="[130]"></a>Pid::UpdateResult()</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, pid.o(i._ZN3Pid12UpdateResultEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Pid::UpdateResult()
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math::LimitMax(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508::Update()
</UL>

<P><STRONG><a name="[146]"></a>Pid::Pid()</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, pid.o(i._ZN3PidC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508::M3508()
</UL>

<P><STRONG><a name="[1a3]"></a>Pid::Pid__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, pid.o(i._ZN3PidC1Ev), UNUSED)

<P><STRONG><a name="[f2]"></a>Dr16::QuerySwState(Dr16::RcSwType, Dr16::RcSwStatusType)</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, dr16.o(i._ZN4Dr1612QuerySwStateENS_8RcSwTypeENS_14RcSwStatusTypeE))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRc::Execute(ChassisController*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisFsm::HandleInput()
</UL>

<P><STRONG><a name="[133]"></a>Dr16::NormalizeAxis(short)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, dr16.o(i._ZN4Dr1613NormalizeAxisEs))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::UpdateNormalizedAxis()
</UL>

<P><STRONG><a name="[13a]"></a>Dr16::UpdateKbdEvents()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dr16.o(i._ZN4Dr1615UpdateKbdEventsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dr16::UpdateKbdEvents()
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Update()
</UL>

<P><STRONG><a name="[132]"></a>Dr16::UpdateNormalizedAxis()</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, dr16.o(i._ZN4Dr1620UpdateNormalizedAxisEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Dr16::UpdateNormalizedAxis()
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::NormalizeAxis(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Update()
</UL>

<P><STRONG><a name="[134]"></a>Dr16::Init()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dr16.o(i._ZN4Dr164InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Dr16::Init() &rArr; bsp_remote_control_init &rArr; bsp_rc_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remote_control_raw
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_remote_control_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_enable
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Dr16()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>Dr16::Update()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dr16.o(i._ZN4Dr166UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Dr16::Update() &rArr; Dr16::UpdateKbdEvents()
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_read_rc_update_flag
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::UpdateNormalizedAxis()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::UpdateKbdEvents()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::GetTick()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dr16.o(.constdata__ZTV4Dr16)
</UL>
<P><STRONG><a name="[d0]"></a>Dr16::Instance()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, chassiscontroller.o(i._ZN4Dr168InstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dr16::Instance()
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Dr16()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRc::Execute(ChassisController*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::Init()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisFsm::HandleInput()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_testbot
</UL>

<P><STRONG><a name="[137]"></a>Dr16::Dr16()</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dr16.o(i._ZN4Dr16C1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Init()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Instance()
</UL>

<P><STRONG><a name="[1a4]"></a>Dr16::Dr16__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dr16.o(i._ZN4Dr16C1Ev), UNUSED)

<P><STRONG><a name="[131]"></a>Math::LimitMax(float, float)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pid.o(i._ZN4Math8LimitMaxEff))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
</UL>

<P><STRONG><a name="[100]"></a>Time::GetTick()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, entity.o(i._ZN4Time7GetTickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Time::GetTick()
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Update()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorEntity::IsTimeout()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entity::Update()
</UL>

<P><STRONG><a name="[cf]"></a>Time::Instance()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i._ZN4Time8InstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Time::Instance()
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11c]"></a>Grasp::Init()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, grasp.o(i._ZN5Grasp4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Grasp::Init() &rArr; bsp_pwm_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::Init()
</UL>

<P><STRONG><a name="[a6]"></a>Grasp::Update()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, grasp.o(i._ZN5Grasp6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Grasp::Update() &rArr; Grasp::contract()
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm_off
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::contract()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::stretch()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> grasp.o(.constdata__ZTV5Grasp)
</UL>
<P><STRONG><a name="[13e]"></a>Grasp::stretch()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, grasp.o(i._ZN5Grasp7stretchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Grasp::stretch()
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm_set_dutyratio
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm_on
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_gpio_high
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::Update()
</UL>

<P><STRONG><a name="[11b]"></a>Grasp::Instance()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, chassiscontroller.o(i._ZN5Grasp8InstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Grasp::Instance()
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::Grasp()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::Update()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::Init()
</UL>

<P><STRONG><a name="[13f]"></a>Grasp::contract()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, grasp.o(i._ZN5Grasp8contractEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Grasp::contract()
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm_set_dutyratio
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pwm_on
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_gpio_low
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::Update()
</UL>

<P><STRONG><a name="[143]"></a>Grasp::Grasp()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, grasp.o(i._ZN5GraspC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::Instance()
</UL>

<P><STRONG><a name="[1a5]"></a>Grasp::Grasp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, grasp.o(i._ZN5GraspC1Ev), UNUSED)

<P><STRONG><a name="[a7]"></a>M3508::Update()</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, m3508.o(i._ZN5M35086UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M3508::Update() &rArr; DjiCanMotorCommander::Add2Buffer(CAN_TypeDef*, int, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::UpdateResult()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DjiCanMotorCommander::Add2Buffer(CAN_TypeDef*, int, short)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3508.o(.constdata__ZTV5M3508)
</UL>
<P><STRONG><a name="[76]"></a>M3508::M3508()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, m3508.o(i._ZN5M3508C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = M3508::M3508() &rArr; M3508SensorHandler::M3508SensorHandler() &rArr; SensorEntity::SensorEntity(EntityClassType) &rArr; Entity::Entity(EntityType, EntityClassType, RobotEngine*) &rArr; RobotEngine::AddEntity(Entity*, EntityType)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActuatorEntity::ActuatorEntity(EntityClassType)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508SensorHandler::M3508SensorHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassiscontroller.o(i._ZN17ChassisControllerC1Ev)
</UL>
<P><STRONG><a name="[1a6]"></a>M3508::M3508__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, m3508.o(i._ZN5M3508C1Ev), UNUSED)

<P><STRONG><a name="[f9]"></a>Entity::ClearUpdateFlag()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, entity.o(i._ZN6Entity15ClearUpdateFlagEv))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotEngine::Tick()
</UL>

<P><STRONG><a name="[a8]"></a>Entity::Init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, entity.o(i._ZN6Entity4InitEv))
<BR>[Address Reference Count : 1]<UL><LI> entity.o(.constdata__ZTV6Entity)
</UL>
<P><STRONG><a name="[7e]"></a>Entity::Update()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, entity.o(i._ZN6Entity6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Entity::Update() &rArr; Time::GetTick()
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::GetTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotEngine::Tick()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> entity.o(.constdata__ZTV6Entity)
<LI> entity.o(.constdata__ZTV12SensorEntity)
<LI> entity.o(.constdata__ZTV16ControllerEntity)
<LI> entity.o(.constdata__ZTV14ActuatorEntity)
</UL>
<P><STRONG><a name="[102]"></a>Entity::Entity(EntityType, EntityClassType, RobotEngine*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, entity.o(i._ZN6EntityC1E10EntityType15EntityClassTypeP11RobotEngine))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Entity::Entity(EntityType, EntityClassType, RobotEngine*) &rArr; RobotEngine::AddEntity(Entity*, EntityType)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotEngine::AddEntity(Entity*, EntityType)
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControllerEntity::ControllerEntity(EntityClassType)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActuatorEntity::ActuatorEntity(EntityClassType)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorEntity::SensorEntity(EntityClassType)
</UL>

<P><STRONG><a name="[1a7]"></a>Entity::Entity__sub_object(EntityType, EntityClassType, RobotEngine*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, entity.o(i._ZN6EntityC1E10EntityType15EntityClassTypeP11RobotEngine), UNUSED)

<P><STRONG><a name="[108]"></a>Packet::MoveBuffer(const unsigned char*, unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, packet.o(i._ZN6Packet10MoveBufferEPKhh))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StreamChannel::HandlePacket()
</UL>

<P><STRONG><a name="[f8]"></a>Packet::Packet__sub_object()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, packet.o(i._ZN6PacketC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Packet::Packet__sub_object() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputMemoryStream::OutputMemoryStream(unsigned char*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::InputMemoryStream(unsigned char*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacket::BoardPacket__sub_object()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacketManager::HostPacketManager()
</UL>

<P><STRONG><a name="[9e]"></a>thunk{-1040} to BoardPacketManager::HandleNewCanRxMsg(CanRxMsg*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, boardpacket.o(i._ZThn1040_N18BoardPacketManager17HandleNewCanRxMsgEP8CanRxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = thunk{-1040} to BoardPacketManager::HandleNewCanRxMsg(CanRxMsg*) &rArr; BoardPacketManager::HandleNewCanRxMsg(CanRxMsg*) &rArr; PacketManager::Enqueue(unsigned, unsigned char*, unsigned) &rArr; StreamChannel::Enqueue(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::HandleNewCanRxMsg(CanRxMsg*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardpacket.o(.constdata__ZTV18BoardPacketManager)
</UL>
<P><STRONG><a name="[a3]"></a>thunk{-36} to M3508SensorHandler::HandleNewCanRxMsg(CanRxMsg*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m3508sensorhandler.o(i._ZThn36_N18M3508SensorHandler17HandleNewCanRxMsgEP8CanRxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = thunk{-36} to M3508SensorHandler::HandleNewCanRxMsg(CanRxMsg*) &rArr; M3508SensorHandler::HandleNewCanRxMsg(CanRxMsg*) &rArr; CanMsgHandler::HandleNewCanRxMsg(CanRxMsg*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508SensorHandler::HandleNewCanRxMsg(CanRxMsg*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3508sensorhandler.o(.constdata__ZTV18M3508SensorHandler)
</UL>
<P><STRONG><a name="[d2]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgDispatcher::Update()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::BoardPacketManager()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisCtrlMsg::SendMsg()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::ChassisController()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::Init()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::Instance()
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisCtrlMsg::Init(CAN_TypeDef*, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalRefMsg::Init(CAN_TypeDef*, unsigned)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::FlushSendBufferLow()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgDispatcher::Instance()
</UL>

<P><STRONG><a name="[d1]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Init()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::GetTick()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotEngine::Tick()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508::Update()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgHandler::HandleNewCanRxMsg(CanRxMsg*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StreamChannel::HandlePacket()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketManager::FlushSendBuffer()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgDispatcher::Update()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateDummy::Execute(ChassisController*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateDummy::Init(ChassisController*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisCtrlMsg::SendMsg()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::Instance()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Instance()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::Instance()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateDummy::Instance()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::Init()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStateRc::Instance()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotEngine::GetTick()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSystem::Instance()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::Instance()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::Instance()
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalRefMsg::HandleNewCanRxMsg(CanRxMsg*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisCtrlMsg::HandleNewCanRxMsg(CanRxMsg*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisCtrlMsg::Init(CAN_TypeDef*, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GimbalRefMsg::Init(CAN_TypeDef*, unsigned)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::FlushSendBufferLow()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgDispatcher::Instance()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacketManager::Instance()
</UL>

<P><STRONG><a name="[79]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 3]<UL><LI> boardpacket.o(.constdata__ZTV11BoardPacket)
<LI> packet.o(.constdata__ZTV13PacketManager)
<LI> packet.o(.constdata__ZTV6Packet)
</UL>
<P><STRONG><a name="[14a]"></a>bsp_buzzer_init</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, bsp_buzzer.o(i.bsp_buzzer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bsp_buzzer_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[152]"></a>bsp_buzzer_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_buzzer.o(i.bsp_buzzer_off))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>bsp_buzzer_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_buzzer.o(i.bsp_buzzer_on))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketManager::FlushSendBuffer()
</UL>

<P><STRONG><a name="[ee]"></a>bsp_can1_init</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, bsp_can.o(i.bsp_can1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bsp_can1_init &rArr; CAN_FilterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::Init()
</UL>

<P><STRONG><a name="[ef]"></a>bsp_can2_init</STRONG> (Thumb, 234 bytes, Stack size 64 bytes, bsp_can.o(i.bsp_can2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bsp_can2_init &rArr; CAN_FilterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::Init()
</UL>

<P><STRONG><a name="[141]"></a>bsp_gpio_high</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_gpio.o(i.bsp_gpio_high))
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::stretch()
</UL>

<P><STRONG><a name="[13c]"></a>bsp_gpio_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_gpio.o(i.bsp_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::Init()
</UL>

<P><STRONG><a name="[144]"></a>bsp_gpio_low</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_gpio.o(i.bsp_gpio_low))
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::contract()
</UL>

<P><STRONG><a name="[126]"></a>bsp_host_com_init</STRONG> (Thumb, 300 bytes, Stack size 112 bytes, bsp_host_com.o(i.bsp_host_com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bsp_host_com_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacketManager::Init()
</UL>

<P><STRONG><a name="[125]"></a>bsp_host_com_send</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, bsp_host_com.o(i.bsp_host_com_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_host_com_send
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacketManager::FlushSendBufferLow()
</UL>

<P><STRONG><a name="[124]"></a>bsp_host_com_send_busy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_host_com.o(i.bsp_host_com_send_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_host_com_send_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacketManager::FlushSendBufferLow()
</UL>

<P><STRONG><a name="[160]"></a>bsp_led_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bsp_led.o(i.bsp_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_led_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>bsp_led_off</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, bsp_led.o(i.bsp_led_off))
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::Update()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>bsp_led_on</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, bsp_led.o(i.bsp_led_on))
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::Update()
</UL>

<P><STRONG><a name="[13b]"></a>bsp_pwm_init</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, bsp_pwm.o(i.bsp_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bsp_pwm_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::Init()
</UL>

<P><STRONG><a name="[13d]"></a>bsp_pwm_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_pwm.o(i.bsp_pwm_off))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::Update()
</UL>

<P><STRONG><a name="[140]"></a>bsp_pwm_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_pwm.o(i.bsp_pwm_on))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::contract()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::stretch()
</UL>

<P><STRONG><a name="[142]"></a>bsp_pwm_set_dutyratio</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_pwm.o(i.bsp_pwm_set_dutyratio))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::contract()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grasp::stretch()
</UL>

<P><STRONG><a name="[138]"></a>bsp_rc_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_rc.o(i.bsp_rc_enable))
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Init()
</UL>

<P><STRONG><a name="[162]"></a>bsp_rc_init</STRONG> (Thumb, 296 bytes, Stack size 96 bytes, bsp_rc.o(i.bsp_rc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bsp_rc_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_remote_control_init
</UL>

<P><STRONG><a name="[139]"></a>bsp_read_rc_update_flag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_rc.o(i.bsp_read_rc_update_flag))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Update()
</UL>

<P><STRONG><a name="[135]"></a>bsp_remote_control_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_rc.o(i.bsp_remote_control_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bsp_remote_control_init &rArr; bsp_rc_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Init()
</UL>

<P><STRONG><a name="[136]"></a>get_remote_control_raw</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_rc.o(i.get_remote_control_raw))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Init()
</UL>

<P><STRONG><a name="[b8]"></a>main</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = main &rArr; Dr16::Init() &rArr; bsp_remote_control_init &rArr; bsp_rc_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_buzzer_off
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_buzzer_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_off
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Init()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotEngine::Init()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::Init()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Instance()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::Instance()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time::Instance()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::Instance()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacketManager::Instance()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f5]"></a>StateMachine&lang;ChassisController&rang;::ChangeState(State&lang;ChassisController&rang;*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, chassiscontroller.o(t._ZN12StateMachineI17ChassisControllerE11ChangeStateEP5StateIS0_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StateMachine&lang;ChassisController&rang;::ChangeState(State&lang;ChassisController&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisFsm::HandleInput()
</UL>

<P><STRONG><a name="[111]"></a>void TestHostPacket::SerializePacket&lang;InputMemoryStream&rang;(T1&)</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, hostpacket.o(t._ZN14TestHostPacket15SerializePacketI17InputMemoryStreamEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = void TestHostPacket::SerializePacket&lang;InputMemoryStream&rang;(T1&) &rArr; InputMemoryStream::SerializeU32(unsigned&) &rArr; InputMemoryStream::SerializeBytes(unsigned char*, unsigned char) &rArr; InputMemoryStream::ReadBits(unsigned char*&, unsigned) &rArr; InputMemoryStream::ReadBits(unsigned char&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::SerializeU32(unsigned&)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::SerializeU16(unsigned short&)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::SerializeU8(unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestHostPacket::OnPacketReceived()
</UL>

<P><STRONG><a name="[115]"></a>void Packet::SerializeCrc16&lang;InputMemoryStream&rang;(T1&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boardpacket.o(t._ZN6Packet14SerializeCrc16I17InputMemoryStreamEEvRT_))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotStatePacket::OnPacketReceived()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBoardPacket::OnPacketReceived()
</UL>

<P><STRONG><a name="[113]"></a>void Packet::SerializeHeader&lang;InputMemoryStream&rang;(T1&)</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, boardpacket.o(t._ZN6Packet15SerializeHeaderI17InputMemoryStreamEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = void Packet::SerializeHeader&lang;InputMemoryStream&rang;(T1&) &rArr; InputMemoryStream::SerializeU16(unsigned short&) &rArr; InputMemoryStream::SerializeBytes(unsigned char*, unsigned char) &rArr; InputMemoryStream::ReadBits(unsigned char*&, unsigned) &rArr; InputMemoryStream::ReadBits(unsigned char&, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::SerializeU16(unsigned short&)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputMemoryStream::SerializeU8(unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotStatePacket::OnPacketReceived()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBoardPacket::OnPacketReceived()
</UL>

<P><STRONG><a name="[74]"></a>HashTable&lang;CanMsgHandler*&rang;::HashTable()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, chassiscontroller.o(t._ZN9HashTableIP13CanMsgHandlerEC1Ev))
<BR>[Address Reference Count : 5]<UL><LI> chassiscontroller.o(i._ZN17ChassisController4InitEv)
<LI> chassisctrlmsg.o(i._ZN14ChassisCtrlMsg4InitEP11CAN_TypeDefj)
<LI> gimbalrefmsg.o(i._ZN12GimbalRefMsg4InitEP11CAN_TypeDefj)
<LI> main.o(i.SysTick_Handler)
<LI> boardpacket.o(i._ZN16CanMsgDispatcher8InstanceEv)
</UL>
<P><STRONG><a name="[1a8]"></a>HashTable&lang;CanMsgHandler*&rang;::HashTable__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, chassiscontroller.o(t._ZN9HashTableIP13CanMsgHandlerEC1Ev), UNUSED)

<P><STRONG><a name="[b1]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1a9]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1aa]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[cd]"></a>CheckITStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CheckITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[d8]"></a>SetSysClock</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e3]"></a>SBUS_TO_RC</STRONG> (Thumb, 186 bytes, Stack size 20 bytes, bsp_rc.o(i.SBUS_TO_RC))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SBUS_TO_RC
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>__sti___8_main_cpp_testbot</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.__sti___8_main_cpp_testbot))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __sti___8_main_cpp_testbot &rArr; BoardPacketManager::Instance() &rArr; BoardPacketManager::BoardPacketManager() &rArr; BoardPacket::BoardPacket__sub_object() &rArr; Packet::Packet__sub_object() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotEngine::RobotEngine(RobotEngine*, unsigned)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dr16::Instance()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardPacketManager::Instance()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisController::ChassisController()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanManager::Instance()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostPacketManager::Instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
